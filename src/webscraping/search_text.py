"""
This file is for searching a text for keywords.
For Claire, Avery, and Rosaline's WicHacks 2023 Project

this file written primarily by Avery Carle

copyleft under GNU GPL 3.0 License
"""

import requests
from bs4 import BeautifulSoup
from find_bills import find_bills
from pdfminer.high_level import extract_text
from parse_keyphrases import parse_keyphrases
import os
import re
import urllib

PHRASES = parse_keyphrases()

"""
Gets a string of the text of a bill
Parameters:
    url: of a bill page (not the pdf itself), as generated by find_bills

Return:
    strting of the bill
"""
def __get_text(url) :
    text = None
    r = requests.get(url)
    soup = BeautifulSoup(r.content, "html.parser")
    a_tags = soup.find_all('a')

    reASPX = re.compile('Format=pdf')
    reDirect = re.compile('.pdf')
    for a in a_tags:
        
        a_link = a.get('href')
        if re.search(reASPX, str(a_link)) or re.search(reDirect, str(a_link)) :
            return __extract_pdf(str(a_link))
    
"""
helper file that downloads a pdf, reads it, and removes it
Parameters:
    link: link to the pdf

Return: the text of the pdf
"""
def __extract_pdf(link) :
    urllib.request.urlretrieve(link, "temp.pdf")
    text = extract_text("temp.pdf")
    os.remove("temp.pdf")
    return text

"""
searches a string for any matches in the keyphrases files, and returns a list of matches
Parameters:
    text: String to search

Returns: a list of matched key-phrases
"""
def search_text(text) :
    tripped = []
    for phrase in PHRASES:
        phrase = phrase.replace(" ", "\s")
        if (re.search(phrase, text)) :
            tripped.append(phrase)

    return tripped

def main() :
    urls = find_bills("TX")
    
    print(urls[5])
    print(search_text(__get_text(urls[5])))
    

if __name__ == "__main__" : main()